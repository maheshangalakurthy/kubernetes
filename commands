--dry-run: By default as soon as the command run, the resource will be created. if you simply want to test you command, 
use --dry-run option.

-o yaml: This will output the resource definition in YAML format on the screen.

Create nginx pod:
 
 kubectl run nginx --image=nginx --restart=Never

Generate POD Manifest Yaml file (-o yaml) Don't Create

    kubectl run nginx --image=nginx --restart=Never --dry-run -o yaml

Deployment:
    kubectl create deployment nginx --image=nginx
    kubectl create deployment nginx --image=nginx --dry-run -o yaml

    Note: --generator=deployment doen't have a --replicas option.

    Save to a file
    kubectl create deployment nginx --image=nginx --dry-run -o yaml > nginx.yaml

Servic:
    kubectl expose pod redis --port=6379 --name redis-service --dry-run -o yaml
    or
    kubectl create servic clusterip redis --tcp=6379:6379 --dry-run -o yaml

Deploy POD:
    kubectl run nginx --image=nginx

list PODS
    kubectl get pods | po | pod

get Nodes:
    kubectl get nodes

Describe pods:
    kubectl describe pods
    kubectl describe pods -o wide

delete POD:
    kubectl delete pod <podname>

Create pod from Manifestfile
    kubectl create -f pod.yaml

List replication controllers:
    kubectl get rc | replicationcontroller
    kubectl describe rc | replicationcontroller

Delete RC:
    kubectl delete rc <rc-name>

Replicaset:
    kubectl get replicaset
    kubectl scale --replicas=5 replicaset <replicaset-name>
    kubectl delete replicaset <replicaset-name>

    update no of replicas to 6 in rc.yaml

        kubectl replace -f rs.yaml
    Scale down:
        kubectl scale --replicas=3 rs.yaml

Deployment:

    kubectl get deployment | deploy
    kubectl get all
    kubectl describe deployment

    Rollout Command:
        kubectl rollout status deployment/<deployment-name>
        kubectl rollout history <deployment-name>

    deployment Strategy 
        1. rolling update
        2. Recreate
    change the nginx version to 1.7.1 in existing deployment file
        kubectl apply -f dep.yaml
        or
        kubectl set image deployment/my-deployment nginx-container=nginx:1.9.1 // this is not changed in yaml file

    Roll back deployment:
        kubectl rollout undo deployment/my-deployment
        other way to deployment
        kubectl run nginx --image=nginx
    kubectl create -f deployment.yaml --record : can see revision and cause 

list pod in default namespace
    kubectl get pods

list pod in kube-system namespace
    kubectl get pods --namespace=kube-system

create pod in another namespace
    kubectl create -f pod.yml --namespace=dev

    kubectl get namespace | ns
create namespace
    kubectl create namespace dev

switch name to dev permentently
    kubectl config set-context $(kubectl config current-context) --namespace=dev

Get all pod in all namespaces
    kubectl get pods --all-namespaces

resources:
    kubectl get resourcequota mem-cpu-demo --namespace=dev
    run a pod in dev namespace
    kubectl get pod quota-mem-cpu-demo --namespace=dev
    kubectl get resourcequota mem-cpu-demo --namespace=dev

Config Maps:
    1. Imperative
        kubectl create configmap <name> --from-literal=<key>=<value>
       kubectl create configmap <name> --from-literal=<key>=<value> --from-literal<key>=<value>
       or
       kubectl create configmap <name> --from-file=<path-of-file>
    
    mkdir -p configure-pod-container/configmap/
    wget https://kubernetes.io/examples/configmap/game.properties -O configure-pod-container/configmap/game.properties
    wget https://kubernetes.io/examples/configmap/ui.properties -O configure-pod-container/configmap/ui.properties

    # Create the configmap
    kubectl create configmap game-config --from-file=configure-pod-container/configmap/
    kubectl describe configmaps game-config
    kubectl get configmaps game-config -o yaml
    
    kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties
    kubectl describe configmaps game-config-2
    kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties --from-file=configure-pod-container/configmap/ui.properties
    kubectl describe configmaps game-config-2

    use --from-env-file to create config Maps
    kubectl create configmap game-config-env-file \
       --from-env-file=configure-pod-container/configmap/game-env-file.properties
    kubectl get configmap game-config-env-file -o yaml

    # Create the configmap
    kubectl create configmap config-multi-env-files \
        --from-env-file=configure-pod-container/configmap/game-env-file.properties \
        --from-env-file=configure-pod-container/configmap/ui-env-file.properties
    Caution: When passing --from-env-file multiple times to create a ConfigMap from multiple data sources, only the last env-file is used.

    kubectl create configmap game-config-3 --from-file=game-special-key=configure-pod-container/configmap/game.properties

    kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm
    kubectl get configmaps special-config -o yaml


Assign Memory Resources to Containers and Pods
    If you are running Minikube, run the following command to enable the metrics-server:
        minikube addons enable metrics-server
        kubectl get apiservices

    create a namespace
        kubectl create namespace mem-example

        kubectl create -f memory_re.yaml
        kubectl get pod memory-demo --namespace=mem-example
        kubectl get pod memory-demo --output=yaml --namespace=mem-example
        kubectl top pod memory-demo --namespace=mem-example
        kubectl delete pod memory-demo --namespace=mem-example
    limits_out issue creating
        kubectl apply -f https://k8s.io/examples/pods/resource/memory-request-limit-2.yaml --namespace=mem-example
        kubectl get pod memory-demo-2 --namespace=mem-example
        kubectl get pod memory-demo-2 --output=yaml --namespace=mem-example
        kubectl describe pod memory-demo-2 --namespace=mem-example
        kubectl delete pod memory-demo-2 --namespace=mem-example
    Specify a memory request that is too big for your Nodes
        kubectl apply -f https://k8s.io/examples/pods/resource/memory-request-limit-3.yaml --namespace=mem-example
        kubectl get pod memory-demo-3 --namespace=mem-example
        kubectl describe pod memory-demo-3 --namespace=mem-example
        kubectl delete pod memory-demo-3 --namespace=mem-example
    kubectl delete namespace mem-example

Specify a CPU request and a CPU limit
    kubectl create namespace cpu-example
    kubectl apply -f https://k8s.io/examples/pods/resource/cpu-request-limit.yaml --namespace=cpu-example
    kubectl get pod cpu-demo --namespace=cpu-example
    kubectl get pod cpu-demo --output=yaml --namespace=cpu-example
    kubectl top pod cpu-demo --namespace=cpu-example
    kubectl delete pod cpu-demo --namespace=cpu-example

